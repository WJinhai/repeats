function [ lambdas, lv ] = jmm_solver( x, xp )

if size(x,1) == 2
    x = [x; 1 1 1];
    xp = [xp; 1 1 1];
end


d = sum(x(1:2,:).^2);
dp = sum(xp(1:2,:).^2);

d0 = [zeros(2,3);d];
d0p = [zeros(2,3);dp];

% Setup corresponding lines
% cross(x(:,1),xp(:,1)) <=> cross(x(:,2),xp(:,2))  (trans. direction)
% cross(x(:,1),x(:,2)) <=> cross(xp(:,1),xp(:,2)),
% cross(x(:,1),x(:,3)) <=> cross(xp(:,1),xp(:,3)),

% TODO: replace cross()? Maybe faster to hardcode.
l0 = [cross(x(:,1),xp(:,1)) cross(x(:,1),x(:,2)) cross(x(:,1),x(:,3))];
l1 = [cross(x(:,1),d0p(:,1)) cross(x(:,1),d0(:,2)) cross(x(:,1),d0(:,3))]+...
     [cross(d0(:,1),xp(:,1)) cross(d0(:,1),x(:,2)) cross(d0(:,1),x(:,3))];
 
l0p = [cross(x(:,2),xp(:,2)) cross(xp(:,1),xp(:,2)) cross(xp(:,1),xp(:,3))];
l1p = [cross(x(:,2),d0p(:,2)) cross(xp(:,1),d0p(:,2)) cross(xp(:,1),d0p(:,3))]+...
     [cross(d0(:,2),xp(:,2)) cross(d0p(:,1),xp(:,2)) cross(d0p(:,1),xp(:,3))];

u0 = cross(l0,l0p);
u1 = cross(l0,l1p)+cross(l1,l0p);
u2 = cross(l1,l1p);

%figure;
%hold on;
%keyboard;
%LAF.draw(gca,reshape([x xp],9,[]),'Color','k');
%xlim([-1000 1000]);
%ylim([-1000 1000]);
%LINE.draw(gca,l0,'Color','r');
%LINE.draw(gca,l1,'Color','g');
%LINE.draw(gca,l0p,'Color','r', ...
%          'LineStyle','--');
%LINE.draw(gca,l1p,'Color','g', ...
%          'LineStyle','--');
%hold off;
%axis equal;
%keyboard;


% compute coeffs for det(u)=0
cc(1)=u1(1,1)*u1(2,2)*u2(3,3) - u1(1,1)*u1(2,3)*u2(3,2) - u1(2,1)*u1(1,2)*u2(3,3) + u1(2,1)*u1(1,3)*u2(3,2) + u1(1,2)*u1(2,3)*u2(3,1) - u1(2,2)*u1(1,3)*u2(3,1);
cc(2)=u0(1,1)*u1(2,2)*u2(3,3) - u0(1,1)*u1(2,3)*u2(3,2) - u0(2,1)*u1(1,2)*u2(3,3) + u0(2,1)*u1(1,3)*u2(3,2) - u0(1,2)*u1(2,1)*u2(3,3) + u0(1,2)*u1(2,3)*u2(3,1) + u0(2,2)*u1(1,1)*u2(3,3) - u0(2,2)*u1(1,3)*u2(3,1) + u0(1,3)*u1(2,1)*u2(3,2) - u0(1,3)*u1(2,2)*u2(3,1) - u0(2,3)*u1(1,1)*u2(3,2) + u0(2,3)*u1(1,2)*u2(3,1) + u1(1,1)*u1(2,2)*u1(3,3) - u1(1,1)*u1(3,2)*u1(2,3) - u1(2,1)*u1(1,2)*u1(3,3) + u1(2,1)*u1(3,2)*u1(1,3) + u1(3,1)*u1(1,2)*u1(2,3) - u1(3,1)*u1(2,2)*u1(1,3);
cc(3)=u0(1,1)*u0(2,2)*u2(3,3) - u0(1,1)*u0(2,3)*u2(3,2) + u0(1,1)*u1(2,2)*u1(3,3) - u0(1,1)*u1(3,2)*u1(2,3) - u0(2,1)*u0(1,2)*u2(3,3) + u0(2,1)*u0(1,3)*u2(3,2) - u0(2,1)*u1(1,2)*u1(3,3) + u0(2,1)*u1(3,2)*u1(1,3) + u0(3,1)*u1(1,2)*u1(2,3) - u0(3,1)*u1(2,2)*u1(1,3) + u0(1,2)*u0(2,3)*u2(3,1) - u0(1,2)*u1(2,1)*u1(3,3) + u0(1,2)*u1(3,1)*u1(2,3) - u0(2,2)*u0(1,3)*u2(3,1) + u0(2,2)*u1(1,1)*u1(3,3) - u0(2,2)*u1(3,1)*u1(1,3) - u0(3,2)*u1(1,1)*u1(2,3) + u0(3,2)*u1(2,1)*u1(1,3) + u0(1,3)*u1(2,1)*u1(3,2) - u0(1,3)*u1(3,1)*u1(2,2) - u0(2,3)*u1(1,1)*u1(3,2) + u0(2,3)*u1(3,1)*u1(1,2) + u0(3,3)*u1(1,1)*u1(2,2) - u0(3,3)*u1(2,1)*u1(1,2);
cc(4)=u0(1,1)*u0(2,2)*u1(3,3) - u0(1,1)*u0(3,2)*u1(2,3) - u0(1,1)*u0(2,3)*u1(3,2) + u0(1,1)*u0(3,3)*u1(2,2) - u0(2,1)*u0(1,2)*u1(3,3) + u0(2,1)*u0(3,2)*u1(1,3) + u0(2,1)*u0(1,3)*u1(3,2) - u0(2,1)*u0(3,3)*u1(1,2) + u0(3,1)*u0(1,2)*u1(2,3) - u0(3,1)*u0(2,2)*u1(1,3) - u0(3,1)*u0(1,3)*u1(2,2) + u0(3,1)*u0(2,3)*u1(1,2) + u0(1,2)*u0(2,3)*u1(3,1) - u0(1,2)*u0(3,3)*u1(2,1) - u0(2,2)*u0(1,3)*u1(3,1) + u0(2,2)*u0(3,3)*u1(1,1) + u0(3,2)*u0(1,3)*u1(2,1) - u0(3,2)*u0(2,3)*u1(1,1);
cc(5)=u0(1,1)*u0(2,2)*u0(3,3) - u0(1,1)*u0(3,2)*u0(2,3) - u0(2,1)*u0(1,2)*u0(3,3) + u0(2,1)*u0(3,2)*u0(1,3) + u0(3,1)*u0(1,2)*u0(2,3) - u0(3,1)*u0(2,2)*u0(1,3);

lambdas = roots(cc);
if nargout == 2
    lv = zeros(3,4);
    for k = 1:4
        A = lambdas(k)^2 * u2 + lambdas(k)*u1 + u0;
        [U,S,V] = svd(A); % TODO qr instead
        lv(:,k) = U(:,end);
    end
end

